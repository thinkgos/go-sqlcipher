name: Go

on:
  push:
    paths-ignore:
      - "**.md"
      - "guide/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - "guide/**"

env:
  GO111MODULE: on
  GOPROXY: "https://proxy.golang.org"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ["1.20.x", "1.24.x"]
      fail-fast: false

    steps:
      - name: (macos)install sqlcipher
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install sqlite3 sqlcipher

      - name: (ubuntu)install sqlite3 sqlcipher
        if: matrix.os == 'ubuntu-latest'
        run: |
          apt update
          apt install sqlite3 sqlcipher

      - name: (windows)install sqlite3 sqlcipher
        uses: msys2/setup-msys2@v2
        if: matrix.os == 'windows-latest'
        with:
          update: true
          install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-sqlite3 mingw-w64-x86_64-sqlcipher
          msystem: MINGW64
          path-type: inherit

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Print Go environment
        id: vars
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nSystem environment:\n\n"
          env
          # Calculate the short SHA1 hash of the git commit
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "go_cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      - name: Cache go modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.vars.outputs.GO_CACHE }}
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.go }}-go-ci-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.go }}-go-ci-

      - name: "(macos,ubuntu)Tags: default"
        if: matrix.os != 'windows-latest'
        run: go test -v -race -coverprofile=coverage -tags ""

      - name: "(windows)Tags: default"
        if: matrix.os == 'windows-latest'
        run: go test -v -race -coverprofile=coverage -tags ""
        shell: msys2 {0}

      # - name: "Tags: libsqlite3"
      #   run: go test -v -race -coverprofile=coverage -tags "libsqlite3"

      # - name: "Tags: full"
      #   run: go test -v -race -coverprofile=coverage -tags "sqlite_allow_uri_authority sqlite_app_armor sqlite_column_metadata sqlite_foreign_keys sqlite_fts5 sqlite_icu sqlite_introspect sqlite_json sqlite_math_functions sqlite_os_trace sqlite_preupdate_hook sqlite_secure_delete sqlite_see sqlite_stat4 sqlite_trace sqlite_unlock_notify sqlite_userauth sqlite_vacuum_incr sqlite_vtable"

      - name: "(macos,ubuntu)Tags: vacuum"
        if: matrix.os != 'windows-latest'
        run: go test -v -race -coverprofile=coverage -tags "sqlite_vacuum_full"

      - name: "(windows)Tags: vacuum"
        if: matrix.os == 'windows-latest'
        run: go test -v -race -coverprofile=coverage -tags "sqlite_vacuum_full"
        shell: msys2 {0}

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
